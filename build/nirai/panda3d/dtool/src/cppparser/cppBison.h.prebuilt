/* A Bison parser, made by GNU Bison 2.7.  */

/* Bison interface for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

#ifndef YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
# define YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int cppyydebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     IDENTIFIER = 263,
     TYPENAME_IDENTIFIER = 264,
     SCOPING = 265,
     TYPEDEFNAME = 266,
     ELLIPSIS = 267,
     OROR = 268,
     ANDAND = 269,
     EQCOMPARE = 270,
     NECOMPARE = 271,
     LECOMPARE = 272,
     GECOMPARE = 273,
     LSHIFT = 274,
     RSHIFT = 275,
     POINTSAT_STAR = 276,
     DOT_STAR = 277,
     UNARY = 278,
     UNARY_NOT = 279,
     UNARY_NEGATE = 280,
     UNARY_MINUS = 281,
     UNARY_STAR = 282,
     UNARY_REF = 283,
     POINTSAT = 284,
     SCOPE = 285,
     PLUSPLUS = 286,
     MINUSMINUS = 287,
     TIMESEQUAL = 288,
     DIVIDEEQUAL = 289,
     MODEQUAL = 290,
     PLUSEQUAL = 291,
     MINUSEQUAL = 292,
     OREQUAL = 293,
     ANDEQUAL = 294,
     XOREQUAL = 295,
     LSHIFTEQUAL = 296,
     RSHIFTEQUAL = 297,
     KW_BEGIN_PUBLISH = 298,
     KW_BLOCKING = 299,
     KW_BOOL = 300,
     KW_CATCH = 301,
     KW_CHAR = 302,
     KW_CHAR16_T = 303,
     KW_CHAR32_T = 304,
     KW_CLASS = 305,
     KW_CONST = 306,
     KW_DELETE = 307,
     KW_DOUBLE = 308,
     KW_DYNAMIC_CAST = 309,
     KW_ELSE = 310,
     KW_END_PUBLISH = 311,
     KW_ENUM = 312,
     KW_EXTENSION = 313,
     KW_EXTERN = 314,
     KW_EXPLICIT = 315,
     KW_PUBLISHED = 316,
     KW_FALSE = 317,
     KW_FLOAT = 318,
     KW_FRIEND = 319,
     KW_FOR = 320,
     KW_GOTO = 321,
     KW_IF = 322,
     KW_INLINE = 323,
     KW_INT = 324,
     KW_LONG = 325,
     KW_LONGLONG = 326,
     KW_MAKE_PROPERTY = 327,
     KW_MAKE_SEQ = 328,
     KW_MUTABLE = 329,
     KW_NAMESPACE = 330,
     KW_NEW = 331,
     KW_NOEXCEPT = 332,
     KW_OPERATOR = 333,
     KW_PRIVATE = 334,
     KW_PROTECTED = 335,
     KW_PUBLIC = 336,
     KW_REGISTER = 337,
     KW_RETURN = 338,
     KW_SHORT = 339,
     KW_SIGNED = 340,
     KW_SIZEOF = 341,
     KW_STATIC = 342,
     KW_STATIC_CAST = 343,
     KW_STRUCT = 344,
     KW_TEMPLATE = 345,
     KW_THROW = 346,
     KW_TRUE = 347,
     KW_TRY = 348,
     KW_TYPEDEF = 349,
     KW_TYPENAME = 350,
     KW_UNION = 351,
     KW_UNSIGNED = 352,
     KW_USING = 353,
     KW_VIRTUAL = 354,
     KW_VOID = 355,
     KW_VOLATILE = 356,
     KW_WCHAR_T = 357,
     KW_WHILE = 358,
     START_CPP = 359,
     START_CONST_EXPR = 360,
     START_TYPE = 361
   };
#endif
/* Tokens.  */
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define STRING 261
#define SIMPLE_IDENTIFIER 262
#define IDENTIFIER 263
#define TYPENAME_IDENTIFIER 264
#define SCOPING 265
#define TYPEDEFNAME 266
#define ELLIPSIS 267
#define OROR 268
#define ANDAND 269
#define EQCOMPARE 270
#define NECOMPARE 271
#define LECOMPARE 272
#define GECOMPARE 273
#define LSHIFT 274
#define RSHIFT 275
#define POINTSAT_STAR 276
#define DOT_STAR 277
#define UNARY 278
#define UNARY_NOT 279
#define UNARY_NEGATE 280
#define UNARY_MINUS 281
#define UNARY_STAR 282
#define UNARY_REF 283
#define POINTSAT 284
#define SCOPE 285
#define PLUSPLUS 286
#define MINUSMINUS 287
#define TIMESEQUAL 288
#define DIVIDEEQUAL 289
#define MODEQUAL 290
#define PLUSEQUAL 291
#define MINUSEQUAL 292
#define OREQUAL 293
#define ANDEQUAL 294
#define XOREQUAL 295
#define LSHIFTEQUAL 296
#define RSHIFTEQUAL 297
#define KW_BEGIN_PUBLISH 298
#define KW_BLOCKING 299
#define KW_BOOL 300
#define KW_CATCH 301
#define KW_CHAR 302
#define KW_CHAR16_T 303
#define KW_CHAR32_T 304
#define KW_CLASS 305
#define KW_CONST 306
#define KW_DELETE 307
#define KW_DOUBLE 308
#define KW_DYNAMIC_CAST 309
#define KW_ELSE 310
#define KW_END_PUBLISH 311
#define KW_ENUM 312
#define KW_EXTENSION 313
#define KW_EXTERN 314
#define KW_EXPLICIT 315
#define KW_PUBLISHED 316
#define KW_FALSE 317
#define KW_FLOAT 318
#define KW_FRIEND 319
#define KW_FOR 320
#define KW_GOTO 321
#define KW_IF 322
#define KW_INLINE 323
#define KW_INT 324
#define KW_LONG 325
#define KW_LONGLONG 326
#define KW_MAKE_PROPERTY 327
#define KW_MAKE_SEQ 328
#define KW_MUTABLE 329
#define KW_NAMESPACE 330
#define KW_NEW 331
#define KW_NOEXCEPT 332
#define KW_OPERATOR 333
#define KW_PRIVATE 334
#define KW_PROTECTED 335
#define KW_PUBLIC 336
#define KW_REGISTER 337
#define KW_RETURN 338
#define KW_SHORT 339
#define KW_SIGNED 340
#define KW_SIZEOF 341
#define KW_STATIC 342
#define KW_STATIC_CAST 343
#define KW_STRUCT 344
#define KW_TEMPLATE 345
#define KW_THROW 346
#define KW_TRUE 347
#define KW_TRY 348
#define KW_TYPEDEF 349
#define KW_TYPENAME 350
#define KW_UNION 351
#define KW_UNSIGNED 352
#define KW_USING 353
#define KW_VIRTUAL 354
#define KW_VOID 355
#define KW_VOLATILE 356
#define KW_WCHAR_T 357
#define KW_WHILE 358
#define START_CPP 359
#define START_CONST_EXPR 360
#define START_TYPE 361



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void *YYPARSE_PARAM);
#else
int cppyyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int cppyyparse (void);
#else
int cppyyparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_CPPYY_BUILT_TMP_CPPBISON_YXX_H_INCLUDED  */
